@page "/"
@using Blazor.SvgDiagram.Extension
@using Blazor.SvgDiagram.Interfaces
@using Blazor.SvgDiagram.Data

@inject IJSRuntime JSRuntime
@inject IDiagram Diagram
@inject IShapeFactory Shape

<h1>Blazor SVG Diagram</h1>

<div>
    <label>Width:</label>
    <input type="number" @bind="Width" />
    <label>Height:</label>
    <input type="number" @bind="Height" />
    <button @onclick="@(async => Diagram.InitializeAsync("svg-container", Width, Height))">Create Workspace</button>
</div>

<div id="svg-container">
</div>

<div id="diagram-properties">
    @if (_selectedElement != null)
    {
        <h3>Selected Element: @_selectedElement.Type</h3>
        @if (_selectedElement.Type != null)
        {
            <p>X: @_selectedElement.X</p>
            <p>Y: @_selectedElement.Y</p>
        }
        @if (_selectedElement.Type == "circle")
        {
            <p>Radius: @_selectedElement.Radius</p>
        }
        else if (_selectedElement.Type == "rect")
        {
            <p>Width: @_selectedElement.Width</p>
            <p>Height: @_selectedElement.Height</p>
        }
        else if (_selectedElement.Type == "line")
        {
            <p>X2: @_selectedElement.X2</p>
            <p>Y2: @_selectedElement.Y2</p>
        }
        else if (_selectedElement.Type == "image")
        {
            <p>Width: @_selectedElement.Width</p>
            <p>Height: @_selectedElement.Height</p>
        }
    }
    else
    {
        <p>No element selected.</p>
    }
</div>

<div>
    <button @onclick="AddRectangle">Add Rectangle</button>
    <button @onclick="AddCircle">Add Circle</button>
    <button @onclick="AddLine">Add Line</button>
    <button @onclick="AddImage">Add Image</button>
</div>

@code {
    private int Width { get; set; } = 800;
    private int Height { get; set; } = 600;
    private IJSObjectReference? _svgModule;
    private ElementInfo? _selectedElement;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Diagram.InitializeAsync("svg-container", Width, Height);
            DiagramHelper.Initialize(this);
        }
    }

    private async Task AddRectangle() => await Diagram.AddShapeAsync(Shape.CreateShape("rectangle", JSRuntime, 50, 50, 100, 80, "red"));

    private async Task AddCircle() => await Diagram.AddShapeAsync(Shape.CreateShape("circle", JSRuntime, 150, 150, 50, "blue"));

    private async Task AddLine() => await Diagram.AddShapeAsync(Shape.CreateShape("line", JSRuntime, 20, 20, 200, 100, "green"));

    private async Task AddImage() => await Diagram.AddShapeAsync(Shape.CreateShape("image", JSRuntime, "https://opencart.club/uploads/monthly_2022_04/12e706e67.png.e826c2e86cba6107b041e6e0abe32780.png", 250, 250, 100, 100));

    public void SelectElementInternal(ElementInfo elementInfo)
    {
        _selectedElement = elementInfo;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        await Diagram.DisposeAsync();
    }
}
